// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.client = {
    updateFile: function(filehash, data) {
      var key;
      data = $.extend(data, {
        filehash: filehash
      });
      for (key in data) {
        data[key] = JSON.stringify(data[key]);
      }
      return $.post('file/update', data, function(response) {});
    },
    fetchFileMeta: function(filehashes, callback) {
      var filehash, i, len, new_filehashes;
      new_filehashes = [];
      for (i = 0, len = filehashes.length; i < len; i++) {
        filehash = filehashes[i];
        if (indexOf.call(store.metaByFilehash, filehash) >= 0) {
          continue;
        }
        new_filehashes.push(filehash);
      }
      return $.post('file/meta', {
        filehashes: JSON.stringify(filehashes)
      }, function(response) {
        store.mergeFileMeta(response.meta_by_filehash);
        return callback(response);
      });
    },
    fetchRecentFilehashes: function(num_activities, callback) {
      return $.get('recents/fetch', function(response) {
        store.mergeFileHashes(response.filehashes);
        store.setActiveFilehashes(response.filehashes);
        return callback(response);
      });
    },
    fetchMiscInfo: function(callback) {
      return $.get('db/misc', function(response) {
        console.log('misc', response);
        store.setMiscInfo(response);
        return callback();
      });
    },
    searchFile: function(tags, keywords, callback) {
      var client;
      client = this;
      return $.post('search', {
        tags: JSON.stringify(tags),
        keywords: JSON.stringify(keywords)
      }, function(response) {
        store.setActiveFilehashes(response.filehashes);
        return client.fetchFileMeta(response.filehashes, function(response) {
          return callback();
        });
      });
    },
    fetchHTMLView: function(static_url, callback) {
      var client;
      client = this;
      return $.get(static_url, {}, function(response) {
        return callback(response);
      });
    },
    fetchRecents: function(num_activities, callback) {
      var client;
      client = this;
      return client.fetchRecentFilehashes(num_activities, function(response) {
        return client.fetchFileMeta(response.filehashes, function(response) {
          return callback();
        });
      });
    }
  };

}).call(this);
