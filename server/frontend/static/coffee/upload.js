// Generated by CoffeeScript 1.10.0
(function() {
  $(function() {
    var formatFileSize, ul;
    ul = $('#upload ul');
    $('#drop a').click(function() {
      return $(this).parent().find('input').click();
    });
    $('#upload').fileupload({
      dropZone: $('#drop'),
      done: function(e, data) {
        data.context.find('#filename')[0].dataset.filehash = data.result.filehash;
        data.context.find('#filename')[0].value = data.result.filename;
        return window.location.href = 'recents';
      },
      add: function(e, data) {
        return $.get('mustache/uploaded-item.html', function(template) {
          var jqXHR, rendered, tpl, view;
          view = {
            filename: data.files[0].name,
            filesize: formatFileSize(data.files[0].size)
          };
          rendered = Mustache.render(template, view);
          tpl = $(rendered);
          data.context = tpl.appendTo(ul);
          tpl.find('#progress').knob();
          tpl.find('span').click(function() {
            if (tpl.hasClass('working')) {
              jqXHR.abort();
            }
            return tpl.fadeOut(function() {
              return tpl.remove();
            });
          });
          tpl.find('#filename').change(function() {
            var filehash, filename;
            filename = tpl.find('#filename')[0].value;
            filehash = tpl.find('#filename')[0].dataset.filehash;
            return $.post('file/update', {
              filename: JSON.stringify(filename),
              filehash: JSON.stringify(filehash)
            }, function(data) {});
          });
          tpl.find("#filename").keyup(function(event) {
            if (event.keyCode === 13) {
              return $(this).blur();
            }
          });
          return jqXHR = data.submit();
        });
      },
      progress: function(e, data) {
        var progress;
        progress = parseInt(data.loaded / data.total * 100, 10);
        data.context.find('#progress').val(progress).change();
        if (progress === 100) {
          return data.context.removeClass('working');
        }
      },
      fail: function(e, data) {
        return data.context.addClass('error');
      }
    });
    $(document).on('drop dragover', function(e) {
      return e.preventDefault();
    });
    return formatFileSize = function(bytes) {
      if (typeof bytes !== 'number') {
        return '';
      }
      if (bytes >= 1000000000) {
        return (bytes / 1000000000).toFixed(2) + ' GB';
      }
      if (bytes >= 1000000) {
        return (bytes / 1000000).toFixed(2) + ' MB';
      }
      return (bytes / 1000).toFixed(2) + ' KB';
    };
  });

}).call(this);
